import { useCallback, useEffect, useState } from "react";
import { NextPageContext } from "next";
import { getSession, signIn } from "next-auth/react";
import { useRouter } from "next/router";
import Input from "@/components/Input";
import useInput from "@/hooks/useInput";
import toast, { Toaster } from "react-hot-toast";
import Head from "next/head";

export const getServerSideProps = async (context: NextPageContext) => {
  //Redirects the user back to the home page if they are already logged in
  const session = await getSession(context);

  if (session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: {},
  };
};

const validateEmailFunction = (value: string) => {
  if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(value)) {
    return true;
  } else {
    return false;
  }
};

const Login = () => {
  const {
    value: enteredName,
    isValid: enteredNameIsValid,
    hasError: nameInputHasError,
    valueChangeHandler: nameChangeHandler,
    inputBlurHandler: nameBlurHandler,
    reset: resetNameInput,
  } = useInput((value: string) => value.trim().length > 2);

  const {
    value: enteredEmail,
    isValid: enteredEmailIsValid,
    hasError: emailInputHasError,
    valueChangeHandler: emailChangeHandler,
    inputBlurHandler: emailBlurHandler,
    reset: resetEmailInput,
  } = useInput(validateEmailFunction);

  const {
    value: enteredPassword,
    isValid: enteredPasswordIsValid,
    hasError: passwordInputHasError,
    valueChangeHandler: passwordChangeHandler,
    inputBlurHandler: passwordBlurHandler,
    reset: resetPasswordInput,
  } = useInput((value: string) => value.trim().length > 7);

  const router = useRouter();

  const [variant, setVariant] = useState("login");
  const [errorMsg, setErrorMsg] = useState("");
  const [formIsValid, setFormIsValid] = useState(false);

  //Checks input fields and sets form validity
  useEffect(() => {
    if (variant === "login" && enteredEmailIsValid && enteredPasswordIsValid) {
      setFormIsValid(true);
    } else if (
      enteredEmailIsValid &&
      enteredNameIsValid &&
      enteredPasswordIsValid
    ) {
      setFormIsValid(true);
    } else {
      setFormIsValid(false);
    }
  }, [enteredEmail, enteredPassword, enteredName, formIsValid]);

  //Toggles form between "Sing in" and "Register" options and resets all input fields
  const toggleVariant = useCallback(() => {
    setVariant((currentVariant) =>
      currentVariant === "login" ? "register" : "login"
    );
    resetEmailInput();
    resetPasswordInput();
    resetNameInput();
    setErrorMsg("");
  }, []);

  //Function for logging in an existing user
  const login = useCallback(async () => {
    try {
      const data = await signIn("credentials", {
        email: enteredEmail,
        password: enteredPassword,
        redirect: false,
        callbackUrl: "/",
      });
      if (data?.error) {
        toast.error(`${data?.error}`);
      }
      router.push("/");
    } catch (error) {
      console.log(error);
    }
  }, [enteredEmail, enteredPassword, router]);

  //Function for creating a new user account
  const register = useCallback(async () => {
    if (
      !enteredNameIsValid ||
      !enteredEmailIsValid ||
      !enteredPasswordIsValid
    ) {
      return;
    }

    try {
      const response = await fetch("/api/register", {
        method: "POST",
        headers: {
          Accept: "application/json, text/plain, */*",
          "Content-Type": "application/json;",
        },
        body: JSON.stringify({
          email: enteredEmail,
          name: enteredName,
          password: enteredPassword,
        }),
      });
      const data = await response.json();
      if (data.error) {
        toast.error(`${data?.error}`);
        return;
      }
      login();
    } catch (error) {
      console.log(error);
    }
  }, [enteredEmail, enteredName, enteredPassword, login]);

  return (
    <>
      <Head>
        <title>Netflix Clone - Login/Register</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="relative h-screen w-full bg-[url('/hero.jpg')] bg-no-repeat bg-center bg-fixed bg-cover">
        <div className="bg-black w-full h-full lg:bg-opacity-50">
          <Toaster position="top-center" />
          <div className="px-12 py-5">
            <img src="/logo.png" className="h-12" alt="Logo" />
          </div>
          <div className="flex justify-center">
            <div className="bg-black bg-opacity-70 px-16 py-12 self-center mt-2 lg:w-2/5 lg:max-w-md rounded-md w-full">
              <h2 className="text-white text-4xl mb-8 font-semibold">
                {variant === "login" ? "Sign in" : "Register"}
              </h2>
              <div className="flex flex-col">
                {variant === "register" && (
                  <Input
                    id="name"
                    type="text"
                    label="Username"
                    value={enteredName}
                    onChange={nameChangeHandler}
                    onBlur={nameBlurHandler}
                    error={nameInputHasError}
                  />
                )}
                {nameInputHasError && (
                  <p className="text-orange-500 text-sm">Name too short!</p>
                )}
                <Input
                  id="email"
                  type="email"
                  label="Email address or phone number"
                  value={enteredEmail}
                  onChange={emailChangeHandler}
                  onBlur={emailBlurHandler}
                  error={emailInputHasError}
                />
                {emailInputHasError && (
                  <p className="text-orange-500 text-sm">
                    Please enter a valid email or phone number.
                  </p>
                )}
                <Input
                  type="password"
                  id="password"
                  label="Password"
                  value={enteredPassword}
                  onChange={passwordChangeHandler}
                  onBlur={passwordBlurHandler}
                  error={passwordInputHasError}
                />
                {passwordInputHasError && (
                  <p className="text-orange-500 text-sm">
                    Password must be at least 8 characters long.
                  </p>
                )}
              </div>
              {errorMsg && <p>{errorMsg}</p>}
              <button
                disabled={!formIsValid}
                onClick={variant === "login" ? login : register}
                className={`bg-red-600 py-3 text-white rounded-md w-full mt-10 ${
                  !formIsValid && "opacity-20"
                } transition`}
              >
                {variant === "login" ? "Login" : "Sign up"}
              </button>

              <p className="text-neutral-500 mt-12">
                {variant === "login"
                  ? "First time using Netflix?"
                  : "Already have an account?"}
                <span
                  onClick={toggleVariant}
                  className="text-white ml-1 hover:underline cursor-pointer"
                >
                  {variant === "login" ? "Create an account" : "Login"}
                </span>
                .
              </p>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Login;
